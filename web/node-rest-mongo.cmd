git init
git checkout -b develop
md project-name
cd project-name
md config
md controllers
md models
md routes

(
    echo # Logs
    echo logs
    echo *.log
    echo npm-debug.log*
    echo yarn-debug.log*
    echo yarn-error.log*
    echo lerna-debug.log*
    echo.
    echo # Diagnostic reports
    echo report.[0-9]echo *.[0-9]echo *.[0-9]echo *.[0-9]echo *.json
    echo.
    echo # Runtime data
    echo pids
    echo *.pid
    echo *.seed
    echo *.pid.lock
    echo.
    echo # Directory for instrumented libs generated by jscoverage/JSCover
    echo lib-cov
    echo.
    echo # Coverage directory used by tools like istanbul
    echo coverage
    echo *.lcov
    echo.
    echo # nyc test coverage
    echo .nyc_output
    echo.
    echo # Grunt intermediate storage 
    echo .grunt
    echo.
    echo # Bower dependency directory 
    echo bower_components
    echo.
    echo # node-waf configuration
    echo .lock-wscript
    echo.
    echo # Compiled binary addons
    echo build/Release
    echo.
    echo # Dependency directories
    echo node_modules/
    echo jspm_packages/
    echo.
    echo # TypeScript v1 declaration files
    echo typings/
    echo.
    echo # TypeScript cache
    echo *.tsbuildinfo
    echo.
    echo # Optional npm cache directory
    echo .npm
    echo.
    echo # Optional eslint cache
    echo .eslintcache
    echo.
    echo # Microbundle cache
    echo .rpt2_cache/
    echo .rts2_cache_cjs/
    echo .rts2_cache_es/
    echo .rts2_cache_umd/
    echo.
    echo # Optional REPL history
    echo .node_repl_history
    echo.
    echo # Output of 'npm pack'
    echo *.tgz
    echo.
    echo # Yarn Integrity file
    echo .yarn-integrity
    echo.
    echo # dotenv environment variables file
    echo .env
    echo .env.test
    echo.
    echo # parcel-bundler cache
    echo .cache
    echo.
    echo # Next.js build output
    echo .next
    echo.
    echo # Nuxt.js build / generate output
    echo .nuxt
    echo dist
    echo.
    echo # Gatsby files
    echo .cache/
    echo # Comment in the public line in if your project uses Gatsby and *not* Next.js
    echo # https://nextjs.org/blog/next-9-1echo #public-directory-support
    echo # public
    echo.
    echo # vuepress build output
    echo .vuepress/dist
    echo.
    echo # Serverless directories
    echo .serverless/
    echo.
    echo # FuseBox cache
    echo .fusebox/
    echo.
    echo # DynamoDB Local files
    echo .dynamodb/
    echo.
    echo # TernJS port file
    echo .tern-port                      
) > .gitignore

(
    echo {
    echo    "name": "starter-node-mongo",
    echo    "version": "1.0.0",
    echo    "description": "My Stater Template for a fully flegged NodeJS Server with a MongoDB Database",
    echo    "main": "server.js",
    echo    "scripts": {
    echo        "start": "node server",
    echo        "dev": "nodemon server"
    echo    },
    echo    "keywords": [],
    echo    "author": "RedJanvier",
    echo    "license": "MIT",
    echo    "dependencies": {
    echo        "colors": "*",
    echo        "dotenv": "*",
    echo        "express": "*",
    echo        "mongoose": "*",
    echo        "morgan": "*"
    echo     },
    echo    "devDependencies": {
    echo        "nodemon": "^2.0.2"
    echo    }
    echo }
) > package.json

(
    echo // Modules 
    echo const http = require('http'^);
    echo const colors = require('colors'^);
    echo const mongoose = require('mongoose'^);
    echo.
    echo // Files
    echo const app = require('./app'^);
    echo.
    echo // Settings
    echo require('dotenv'^).config({ path: './config/config.env' }^);
    echo const PORT = process.env.PORT || 4000;
    echo.
    echo // Create Server
    echo const server = http.createServer(app^);
    echo.
    echo // Server Listen
    echo mongoose
    echo    .connect('mongodb://localhost/graphql-db', {
    echo        useCreateIndex: true,
    echo        useNewUrlParser: true,
    echo        useUnifiedTopology: true
    echo    }^)
    echo    .then((^) =^> {
    echo        app.listen(
    echo            PORT,
    echo            console.log(`Server started at: http://localhost:${PORT}/api/v1/`^)
    echo        ^);
    echo    }^)
    echo    .catch(console.log^);
) > server.js

(
    echo const express = require('express'^);
    echo const app = express(^);
    echo.
    echo app.use('/api/v1', require('./routes/index'^)^);
    echo.
    echo module.exports = app;
) > app.js

(
    echo NODE_ENV=development
    echo PORT=4000
    echo MONGO_URI=mongodb://localhost/mydatabase
) > config/config.env

(
    echo // Models
    echo const Index = require('../models/index'^);
    echo.
    echo // @desc      Test Route
    echo // @route     GET /api/v1/
    echo // @access    Public
    echo exports.testRoute = async (req, res, next^) =^> {
    echo    try {
    echo        const indexes = await Index.find(^);
    echo.
    echo        res.status(200^).json({
    echo            success: true,
    echo            count: indexes.length,
    echo            data: indexes
    echo        }^);
    echo    } catch (err^) {
    echo        console.log(`Error: ${err.message}`.red^);
    echo        res.status(500^).json({
    echo            success: false,
    echo            error: `Server Error`
    echo        }^);
    echo    }
    echo };
) > controllers/index.js

(
    echo const mongoose = require('mongoose'^);
    echo.
    echo const IndexSchema = new mongoose.Schema({
    echo    text: {
    echo        type: String,
    echo        require: [true, 'Please Provide some text for the test']
    echo    },
    echo    createdAt: {
    echo        type: Date,
    echo        default: Date.now(^)
    echo    }
    echo }^);
    echo.
    echo module.exports = mongoose.model('Index', IndexSchema^);
) > models/index.js

(
    echo const router = require('express'^).Router(^);
    echo.
    echo // Controllers
    echo const index = require('../controllers/index'^);
    echo.
    echo router
    echo     .route('/'^)
    echo     .get(index.testRoute^);
    echo.
    echo module.exports = router;
) > routes/index.js

git add .
git commit -m "initial commit"
npm install --save
code .